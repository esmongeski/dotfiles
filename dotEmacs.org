* Extra Plugins
Evil, because I am a vim user at heart.
#+BEGIN_SRC emacs-lisp
  (use-package org-evil)
  (use-package evil)
  (evil-mode 1)
#+END_SRC
Evil bindings
#+begin_src emacs-lisp
(define-key evil-ex-map "e" 'find-file)

#+end_src
* Package things!
This is a bit of fumbling to try and get this all to work on a new computer from zero with minimal manual intervention.

The key is package-refresh-contents - however, it's super slow. The t argument makes it run asynchronously. This means I might have to open emacs multiple times on a new computer to get this working.

Apparently the call to package-initialize isn't always required? I don't fully understand what it does yet.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  ;;(package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
#+END_SRC
Make use package always install if package is not installed.
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

Ubuntu specific (hopefully this doesn't break mac!) - this forces org to update to a later version.
#+BEGIN_SRC emacs-lisp
  (use-package org :ensure org-plus-contrib :pin org)
#+END_SRC

This brings back the old "<s" shortcut for source blocks. Unfortunately it has different casing than before, but that's not worth the time to fix (probably easy though).
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* Custom variables (I don't really remember what this is)
Variables - org agenda files, which will some day pull dates, but are also used for how things refile. Packages, which I guess says which packages are installed? 
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(org-agenda-files
     (quote
      ("~/Dropbox/org/recurring.org" "~/Dropbox/org/homeProjects.org" "~/Dropbox/org/personalProjects.org" "~/Dropbox/org/funThings.org" "~/Dropbox/org/workStuff.org" "~/Dropbox/org/archive.org")))
   '(package-selected-packages
     (quote
      (org-bullets helm-org org-evil monitor dash powerline-evil ## org-link-minor-mode org-mobile-sync evil))))
  (setq org-startup-indented t)
  (setq org-startup-folded t)
#+END_SRC
No clue what custom-set-faces is to be honest.
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
 ;; Package-Requires: ((dash "2.13.0"))
 ;; (add-to-list 'load-path "~/.emacs.d/vendor/emacs-powerline")
 ;; (require 'powerline)
 ;; (require 'cl)
#+END_SRC
Refile config. I found this on reddit, but I think this says "take the stuff from org-agenda-files and go one level deep in the trees to find targets". It works.
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((nil :maxlevel . 1)
                                  (org-agenda-files :maxlevel . 2)
                                  ("~/Dropbox/org/stuff.org" :maxlevel . 1)))
  (setq org-refile-use-outline-path 'file)
#+END_SRC
Adding sh (bash) to babel languages so I can tangle my bash profile.
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
      '(
          (shell . t)
      )
  )
(setq org-babel-default-header-args:bash '((:tangle . "yes")))
#+end_src
* Todo customization - states and donetime/note
Ongoing thing to figure out what states I want. log-done enables timestamp and prompts for a note. Archive location is what you'd expect.

More details [[https://orgmode.org/manual/Tracking-TODO-state-changes.html][Here]]
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
     '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "IN-PROGRESS(i)" "|" "DONE(d)" "EXPORTED(e)" "OBSOLOTE(o)")))

(setq org-log-done 'time)
(setq org-log-done 'note)

(setq org-archive-location "~/Dropbox/org/archive.org::")
#+END_SRC

Custom priorities
#+BEGIN_SRC emacs-lisp
(setq org-lowest-priority 74)
#+END_SRC

Make checkbox/todo tracking recursive so I see everything under the subtree
#+begin_src emacs-lisp
(setq org-hierarchical-todo-statistics t)
#+end_src

Column view in org-agenda
#+begin_src emacs-lisp
(setq org-columns-default-format-for-agenda "%80ITEM(Task) %4PRIORITY(Priority)  %10TODO(Todo Status) %17Effort(Estimated Effort){:} %CLOCKSUM(Time Spent)")
#+end_src
** Agenda Sorting
Define a custom tiebreaker for priority - I baically want A on par with within 1 day, B on par with within 2 days, etc.
#+begin_src emacs-lisp :tangle no
      (setq org-agenda-cmp-user-defined (lambda (a b) (message (org-get-priority a))))
#+end_src

Only one change from the default strategy, which is to use effort-up. The ordering on agenda is now "high priority first, low effort first, respect order of org-agenda-files".
I think the fact that all my things in "recurring.org" are habits sort of circuvents "habit-down". But I don't mind for now.
#+begin_src emacs-lisp
  (setq org-agenda-sorting-strategy
    '((agenda user-defined-up habit-down time-up priority-down effort-up category-keep)
      (todo priority-down category-keep)
      (tags priority-down category-keep)
      (search category-keep)))
#+end_src
** Curating todos
Org agenda todo - filter out things with dates so I schedule any dangling todos. Apparently I need all of these set - I tend to just slap dates on stuff so it'll show on the agenda,
which is good enough for me.
#+begin_src emacs-lisp
  (setq org-agenda-todo-ignore-scheduled "all")
  (setq org-agenda-todo-ignore-deadlines "all")
  (setq org-agenda-todo-ignore-timestamp "all")
  (setq org-agenda-todo-ignore-with-date "all")
  (setq org-agenda-tags-todo-honor-ignore-options t)
#+end_src
* Colors!!!! And other nice displays - change the ... to a return thingy, make nice bullet icons.
#+BEGIN_SRC emacs-lisp
(load-theme 'manoj-dark)
(setq org-ellipsis "â¤µ")
(use-package org-bullets
   :ensure t
       :init
       (add-hook 'org-mode-hook (lambda ()
                           (org-bullets-mode 1))))
#+END_SRC
Line numbering - absolute and relative.
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src
This makes emacs figure out the max line numbers beforehand - for longer files
with thousands of lines, there is a little bump that happens when line numbers are
displayed - this fixes that.
#+begin_src emacs-lisp
  (setq display-line-numbers-width-start t)
#+end_src
** Emphasis markers
WIP - Hide emphasis markers to make things a bit prettier.
#+begin_src emacs-lisp
#+end_src
*bold* /italic/ _underline_ =literal= ~code~ +strikethrough+
* Custom Key Bindings
This first one is to get a different one for org-refile. I want it as C-r C-f (rf -> refile)

First thing to do is to set "C-r" as a possible prefix.
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'ring-map)
(global-set-key (kbd "C-r") 'ring-map)
#+END_SRC

Next thing to do is to remove "C-r" from the evil map (apparently it's redo, which I never use).

Then we do the actual "C-r C-f" bind.
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-r") nil)
(global-set-key (kbd "C-r C-f") 'org-refile)

#+END_SRC

Another one - archive. I'm gonna do "C-r C-a" for "refile - archive", and because I have "C-r" as a prefix now.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-r C-a") 'org-archive-subtree)
#+END_SRC

* Debugging
Trying to see what this does on startup so I can optimize my init/dotfiles.
#+begin_src emacs-lisp
;;(setq message-log-max t)
#+end_src

* IN-PROGRESS Notion
This is an attempt to hit the [[https://developers.notion.com/docs/getting-started][notion api]] in order to dump tasks out of org into notion.

My anticipated workflow is, while grooming my inbox, instead of refiling an item, I export it to Notion via POST.

Then I mark the item EXPORTED (custom TODO state) and archive it.

This is also the first elisp I'm writing on my own, so it's a learning experience.

Thus far I've managed to extract the todo state and map it to the todo status I use in notion.

Next, I need to format a payload with local secrets (api key) and hit the api. It looks like the preferred way to do this in emacs is [[http://tkf.github.io/emacs-request/][request.el]].
#+begin_src emacs-lisp
    (require 'org-element)
    ;; make a function that gets the org heading components as an alist mapped to the things in notion
    ;; make a function that json encodes that
    ;; make a function to call the api
    (defun org-todo-to-notion-todo (org-todo)
      "map org todo status to notion status - you should change this to fit whatever todo statuses you have"
      (plist-get '(TODO "To Do" IN-PROGRESSS "Doing" DONE "Done") (intern org-todo)))
    
    (defun org-heading-to-notion-json ()
      "Encode current heading as json"
      (let* ((ohc (org-heading-components))
             (todo-state (nth 2 ohc))
             (notion-todo-state (org-todo-to-notion-todo todo-state)))
           (message notion-todo-state)))
    
#+end_src

* Layout
#+begin_src emacs-lisp
(defadvice org-agenda (around split-vertically activate)
  (let ((split-width-threshold 300))  ; or whatever width makes sense for you
    ad-do-it))
#+end_src

* Org capture setup
Inbox directory
#+begin_src emacs-lisp
(setq org-default-notes-file "~/Dropbox/org/inbox.org")
#+end_src
Stick backup files elsewhere. They screw up IFTTT's dropbox integration for some reason.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "./.emacsSaves")))

#+end_src
Start server
#+begin_src emacs-lisp
(server-start)
#+end_src
Capture templates
#+begin_src emacs-lisp
    (setq org-capture-templates
      '(("p" "Personal" entry (file "~/Dropbox/org/inbox.org")
         "* TODO %?\n")
        ("w" "Work" entry (file "~/Dropbox/org/workStuff.org")
         "* TODO %?\n")
        ("t" "Things on my mind" entry (file "~/Dropbox/org/tList.org")
         "* TODO %?\n" )
        ("s" "Stuff" entry (file "~/Dropbox/org/stuff.org")
         "* TODO %?\n")))
#+end_src
* Powerline
#+begin_src emacs-lisp
  (use-package powerline-evil
    :config
    (powerline-evil-center-color-theme))

#+end_src
* Ubuntu
This is a hack because I probably have a bad config on my ubuntu machine. For some reason, ~string-empty-p~ isn't defined at runtime, but when I ~describe-function~ it, it shows up.
This breaks org-agenda. Requring ~subr-x~ at startup fixes this.
#+begin_src emacs-lisp
(require 'subr-x)
#+end_src
Ubuntu specific (hopefully this doesn't break mac!) - this forces org to update to a later version.
#+BEGIN_SRC emacs-lisp
  (use-package org :ensure org-plus-contrib :pin org)
#+END_SRC
More hacks to force dependencies into place, hopefully.
#+begin_src emacs-lisp
(require 'org-macs)
#+end_src
* ODT Styles
The default styles are gross. I use google docs all day erry day. This is an ODT file that has the headers for google docs.

This seems to barf on multiline source blocks, but I don't use that for notes much, so that's ok (typically the last line
of a source block is unstyled).
#+begin_src emacs-lisp
  (setq org-odt-styles-file (concat (getenv "PATH_TO_DOTFILES_REPO") "/gdocStyles.odt"))
#+end_src
Table of contents is ugly, and google doc styles do it for you anyway (in google docs)
#+begin_src emacs-lisp
  (setq org-export-with-toc nil)
#+end_src

So this is an attempt to make people in a meeting todos, and then use todos to quickly flag who is speaking
as I'm taking notes. You can only do todo states on headers by default, so I'm using inlinetask to try and
use todo states elsewhere.

Update: Doesn't quite work the way I want, it renders kinda ugly in a huge block. If I'm indented far enough (5?)
the todo states seem to work. Keeping because this is needed for the meeting minutes stuff below.

Update: four *s seems to work to not use a header, which will work for me.
#+begin_src emacs-lisp
  (require 'org-inlinetask) 
#+end_src
** Meeting minutes
[[https://lists.gnu.org/archive/html/emacs-orgmode/2019-10/msg00300.html][This]] seems interesting. Try it out.
#+begin_src emacs-lisp
(require 'org)
(require 'dash)

(defun org-actionitems-extract-entry ()
  (-let* ((entries (org-entry-properties))
          ((&alist "ITEM" "TODO" "DEADLINE") entries))
    (list ITEM TODO DEADLINE)))

(defun org-dblock-write:actionitems (params)
  (let ((match (or (plist-get params :match) "/+TODO")))
    (insert-before-markers "| What | Who | When |\n")
    (insert-before-markers "|-\n")
    (let* ((tasks (org-map-entries 'org-actionitems-extract-entry match))
           (rows (-map (lambda (task)
                         (->> task
                              (-map (lambda (item) (or item "")))
                              (apply 'format "| %s | %s | %s |")))
                       tasks))
           (table (string-join rows "\n")))
      (insert-before-markers table))
    (org-table-align)))
  
#+end_src

* Mermaid in org
https://github.com/arnm/ob-mermaid
Install this in "~/" or else!
#+begin_src emacs-lisp
  (use-package ob-mermaid)
  (setq ob-mermaid-cli-path "~/node_modules/.bin/mmdc")
#+end_src

This is what this ends up looking like. Keeping it here as an example - this
is just the thing that the [[https://mermaid-js.github.io/mermaid-live-editor/edit][mermaid live editor]] ships with.
#+begin_src mermaid :file mermaidTest.png
graph TD
    A[Christmas] -->|Get money| B(Go shopping)
    B --> C{Let me think}
    C -->|One| D[Laptop]
    C -->|Two| E[iPhone]
    C -->|Three| F[fa:fa-car Car]
#+end_src

[[file:mermaidTest.png]]

* Trim whitespace on save
#+begin_src emacs-lisp
(add-hook 'write-file-hooks 'delete-trailing-whitespace)
#+end_src
