* Package things!
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
;;(require 'use-package)
#+END_SRC

* Extra Plugins
#+BEGIN_SRC emacs-lisp
(require 'org-evil)
(require 'evil)
(evil-mode 1)
#+END_SRC

* Custom variables (I don't really remember what this is)
** Variables - org agenda files, which will some day pull dates, but are also used for how things refile. Packages, which I guess says which packages are installed? 
#+BEGIN_SRC emacs-lisp 
(custom-set-variables                                                                                                                                                                                      
 '(org-agenda-files
   (quote
    ("~/Dropbox/org/personalProjects.org" "~/Dropbox/org/actionItems.org" "~/Dropbox/org/funThings.org" "~/Dropbox/org/maryThings.org" "~/Dropbox/org/homeProjects.org" "~/Dropbox/org/enviornmentConfigAndLearning.org")))
 '(package-selected-packages
   (quote
    (helm-org org-evil monitor dash powerline-evil ## org-link-minor-mode org-mobile-sync evil))))

(setq org-startup-indented t)
#+END_SRC
** No clue what custom-set-faces is to be honest.
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
 ;; Package-Requires: ((dash "2.13.0"))
 ;; (add-to-list 'load-path "~/.emacs.d/vendor/emacs-powerline")
 ;; (require 'powerline)
 ;; (require 'cl)
#+END_SRC
** Refile config. I found this on reddit, but I think this says "take the stuff from org-agenda-files and go one level deep in the trees to find targets". It works.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 1)
                                (org-agenda-files :maxlevel . 1)))
;; hmmmm maybe ignore for now so I just get files???
;;(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path 'file)                  
#+END_SRC

* Todo customization - states and donetime/note
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
     '((sequence "TODO" "WAITING" "IN-PROGRESS" "|" "DONE" "OBSOLOTE" "|" "SOMEDAY")))

(setq org-log-done 'time)
(setq org-log-done 'note)

(setq org-archive-location "~/Dropbox/org/archive.org::")
#+END_SRC

* Colors!!!! And other nice displays - change the ... to a return thingy, make nice bullet icons.
#+BEGIN_SRC emacs-lisp
(load-theme 'manoj-dark)
(setq org-ellipsis "â¤µ")
(use-package org-bullets
   :ensure t
       :init
       (add-hook 'org-mode-hook (lambda ()
                           (org-bullets-mode 1))))
#+END_SRC
