* Package things!
This is a bit of fumbling to try and get this all to work on a new computer from zero with minimal manual intervention.

The key is package-refresh-contents - however, it's super slow. The t argument makes it run asynchronously. This means I might have to open emacs multiple times on a new computer to get this working.

Apparently the call to package-initialize isn't always required? I don't fully understand what it does yet.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  ;;(package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
#+END_SRC
Ubuntu specific (hopefully this doesn't break mac!) - this forces org to update to a later version.
#+BEGIN_SRC emacs-lisp
  (use-package org :ensure org-plus-contrib :pin org)
#+END_SRC

This brings back the old "<s" shortcut for source blocks. Unfortunately it has different casing than before, but that's not worth the time to fix (probably easy though).
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* Extra Plugins
Evil, because I am a vim user at heart.
#+BEGIN_SRC emacs-lisp
  (use-package org-evil)
  (use-package evil) 
  (evil-mode 1)
#+END_SRC

org-heading to extract org things as structured objects
#+begin_src emacs-lisp
;;(require 'org-element)
#+end_src
* Custom variables (I don't really remember what this is)
Variables - org agenda files, which will some day pull dates, but are also used for how things refile. Packages, which I guess says which packages are installed? 
#+BEGIN_SRC emacs-lisp 
(custom-set-variables                                                                                                                                                                                      
 '(org-agenda-files
   (quote
    ("~/Dropbox/org/recurring.org" "~/Dropbox/org/personalProjects.org" "~/Dropbox/org/funThings.org" "~/Dropbox/org/homeProjects.org" "~/Dropbox/org/workStuff.org")))
 '(package-selected-packages
   (quote
    (org-bullets helm-org org-evil monitor dash powerline-evil ## org-link-minor-mode org-mobile-sync evil))))

(setq org-startup-indented t)
(setq org-startup-folded t)
#+END_SRC
No clue what custom-set-faces is to be honest.
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
 ;; Package-Requires: ((dash "2.13.0"))
 ;; (add-to-list 'load-path "~/.emacs.d/vendor/emacs-powerline")
 ;; (require 'powerline)
 ;; (require 'cl)
#+END_SRC
Refile config. I found this on reddit, but I think this says "take the stuff from org-agenda-files and go one level deep in the trees to find targets". It works.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 1)
                                (org-agenda-files :maxlevel . 1)))
(setq org-refile-use-outline-path 'file)                  
#+END_SRC
Adding sh (bash) to babel languages so I can tangle my bash profile.
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
      '(
          (shell . t)
      )
  )
(setq org-babel-default-header-args:bash '((:tangle . "yes")))
#+end_src
* Todo customization - states and donetime/note
Ongoing thing to figure out what states I want. log-done enables timestamp and prompts for a note. Archive location is what you'd expect.

More details [[https://orgmode.org/manual/Tracking-TODO-state-changes.html][Here]]
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
     '((sequence "TODO" "WAITING" "IN-PROGRESS" "|" "DONE" "EXPORTED" "OBSOLOTE")))

(setq org-log-done 'time)
(setq org-log-done 'note)

(setq org-archive-location "~/Dropbox/org/archive.org::")
#+END_SRC

Custom priorities
#+BEGIN_SRC emacs-lisp
(setq org-lowest-priority 74)
#+END_SRC

Make checkbox/todo tracking recursive so I see everything under the subtree
#+begin_src emacs-lisp
(setq org-hierarchical-todo-statistics t)
#+end_src

Column view in org-agenda
#+begin_src emacs-lisp
(setq org-columns-default-format-for-agenda "%80ITEM(Task) %4PRIORITY(Priority)  %10TODO(Todo Status) %17Effort(Estimated Effort){:} %CLOCKSUM(Time Spent)")
#+end_src
* Colors!!!! And other nice displays - change the ... to a return thingy, make nice bullet icons.
#+BEGIN_SRC emacs-lisp
(load-theme 'manoj-dark)
(setq org-ellipsis "â¤µ")
(use-package org-bullets
   :ensure t
       :init
       (add-hook 'org-mode-hook (lambda ()
                           (org-bullets-mode 1))))
#+END_SRC
* Custom Key Bindings
This first one is to get a different one for org-refile. I want it as C-r C-f (rf -> refile)

First thing to do is to set "C-r" as a possible prefix.
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'ring-map)
(global-set-key (kbd "C-r") 'ring-map)
#+END_SRC

Next thing to do is to remove "C-r" from the evil map (apparently it's redo, which I never use).

Then we do the actual "C-r C-f" bind.
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-r") nil)
(global-set-key (kbd "C-r C-f") 'org-refile)

#+END_SRC

Another one - archive. I'm gonna do "C-r C-a" for "refile - archive", and because I have "C-r" as a prefix now.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-r C-a") 'org-archive-subtree)
#+END_SRC

* Debugging
Trying to see what this does on startup so I can optimize my init/dotfiles.
#+begin_src emacs-lisp
;;(setq message-log-max t)
#+end_src

* Notion
#+begin_src emacs-lisp
(defun json-org-heading ()
    "Encode current heading as json"
    (json-encode (org-heading-components)))

#+end_src

* Layout
#+begin_src emacs-lisp
(defadvice org-agenda (around split-vertically activate)
  (let ((split-width-threshold 300))  ; or whatever width makes sense for you
    ad-do-it))
#+end_src

* Ubuntu
This is a hack because I probably have a bad config on my ubuntu machine. For some reason, ~string-empty-p~ isn't defined at runtime, but when I ~describe-function~ it, it shows up.
This breaks org-agenda. Requring ~subr-x~ at startup fixes this.
#+begin_src emacs-lisp
(require 'subr-x)
#+end_src
