* What is this
I started using fish, but I still want my config in org. It's fishProfile.org!

** TODO Pickle rick gif
* Aliases (aliaii?)
Here's something that never panned out:
#+begin_src fish
alias a='alias'
#+end_src

** Basic shortcuts
*** Modifying fish profile
#+begin_src fish
alias vfp='emacs $PATH_TO_DOTFILES_REPO/fish/fishProfile.org'
alias sfp='. $PATH_TO_DOTFILES_REPO/fish/fish_profile.fish'
alias vlfp='vim ~/.config/fish/config.fish'
alias slfp='. ~/.config/fish/config.fish'
alias cddf='cd $PATH_TO_DOTFILES_REPO'
#+end_src
*** Modifying bash profile
Mostly for the sake of migrating it
#+begin_src fish
alias vbp='emacs $PATH_TO_DOTFILES_REPO/bashProfile.org'

#+end_src
** Local dotfiles
Shortcuts to open local dotfiles. Generally, these files source something in this repo for ease of bootstrapping config on new machines.
#+begin_src fish
alias vlv='vim ~/.vimrc'
alias vle='vim ~/.emacs.d/init.el'
alias vlbp='vim ~/.bash_profile'
#+end_src
** Dotfiles in this repo
These require the aliases used to be defined locally so this can figure out the path.
Some of them are of the form "vx" which in my brain is "vim x". I have cleverly redirected org files to emacs, even though I still type "ve" for "vim emacsconfig".
#+begin_src fish
alias ve='echoAndEval "emacs $PATH_TO_DOTFILES_REPO/dotEmacs.org"'
#+end_src

** Common org files
Dropbox paths are probably the same everywhere? Fingers crossed!
#+begin_src fish
  alias inbox='emacs ~/Dropbox/org/inbox.org'
  alias ptodos='emacs ~/Dropbox/org/homeProjects.org'
  alias funthings='emacs ~/Dropbox/org/funThings.org'
  alias homeprojects='emacs ~/Dropbox/org/homeProjects.org'
  alias pproj='emacs ~/Dropbox/org/personalProjects.org'
  alias workstuff='emacs ~/Dropbox/org/workStuff.org'
  alias winbox='workstuff'
  alias recurring='emacs ~/Dropbox/org/recurring.org'
#+end_src
Quick navigation to my org directory.
#+begin_src fish
alias cdo='cd ~/Dropbox/org'
#+end_src
** Quick backtracking
[[https://github.com/dusbennett/terminal-commands/blob/master/shell/.profile][Completely stolen from Dustin Bennett]]
#+begin_src fish
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'
#+end_src
* Terminal prompt
Using go powerline.
#+begin_src fish
export GOPATH="$HOME/go"
export GOBIN="$HOME/go/bin"
function fish_prompt
    eval $GOPATH/bin/powerline-go -error $status -jobs (count (jobs -p))
end
#+end_src
* External config checking
Env vars this depends on - need to be set in local fish profile.
This is a poor man's form of dependency injection enforcement in fish.
Maybe there's a better way to futz with env vars that should be defined elsewhere, but I don't know it.
#+begin_src fish
function checkEnvAndDefault
  if not set -q $argv[1]
    echo "You should probably export $argv[1] in the local fish config"
    export (echo $argv[1])="YOUFORGOTTOSETTHIS"
  end
end
#+end_src

And these are the vars I want defined by the local system.

#+begin_src fish
checkEnvAndDefault "PATH_TO_DOTFILES_REPO"
checkEnvAndDefault "PATH_TO_EDITABLE_DOT_EMACS"
#+end_src
* EchoAndEval
Utility function to spit out a thing to STDOUT and then evaluate it. Useful because I want to see what my aliases are doing in many cases.
#+begin_src fish
function echoAndEval
	echo $argv[1]
	eval $argv[1]
end
#+end_src
* Greppy things
** Grep recursive directory ignore crap
I always mess up "grep -r stuff ." and "grep -r . stuff"
vendor is an exclusion of php libraries - I should probably add other libarary directories
but I'm mostly writing php day to day
#+begin_src fish
function grd
  grep -r -i --exclude-dir={vendor,.git,.idea} $argv[1] . | grep -v vendor
end
#+end_src
** Quickly ls and pipe into grep
#+begin_src fish
alias lsg='ls | grep'
#+end_src
* Git stuff
Hook to add interesting things - at one point Ben Doherty wrapped git in timing to prove how awful our main repo was. I don't have the timing anymore, but did get used to typing "g" instead of "git"
#+begin_src fish
alias g='git'
#+end_src
** gchlike
This thing is super great. Give it a short string, and it greps your git branches for that string. If it finds exactly
one match, it checks out that branch. Otherwise it tells you what it did find you can refine your query (or just copy
the branch you want)
#+begin_src fish
function gchlike
    set -l matches (g branch | grep -i $argv[1] | awk '{print $1;}')
    set -l matchcount (echo "$matches" | wc -w)
    if [ $matchcount -gt 1 ]
        echo "Too many branches!"
        echo "$matches"
    else if [ -z "$matches" ]
        echo "No branches!"
    else
        echo "checking out $matches"
        g checkout "$matches"
    end
end
#+end_src
** Mistakes
Sometimes, I fuck up with git, because it's git and it's kinda complicated sometimes. These help recover from said fuckups.
#+begin_src fish
alias unstage="g reset HEAD"
alias gpush='echo "ted you typed too fast"; g push;'
alias gpull='echo "ted you typed too fast"; g pull;'
#+end_src

If you're in the middle of a pull or rebase and hit a conflict, this can back you out of it. The gitlab ci think wasn't checked out by checkout * for some reason.
#+begin_src fish
function idontwannamerge
    g reset HEAD;
    g clean -f -d;
    g checkout *
    gc .gitlab-ci.yml
end
#+end_src

More things along the line of "oh crap I shouldn't have committed". Ever commit to main, push, and get the "you can't do that" message? These are your friend.
#+begin_src fish
alias undocommitanddelete="g reset HEAD^; g checkout *; g clean -f -d"
alias undocommit="g reset HEAD^"
#+end_src

** Core workflow
Git add and commit with message - gotta shortcut this. Didn't end up using `gp` as much, but oh well!
#+begin_src fish
function gca
  g add .; git commit -m "$argv";
end
alias gp='g push'
#+end_src
Ok so, to get a little political, sometimes there are movements to change the language we use. And sometimes, people don't like it because changing language introduces cognitive tax, which is like, kinda understandable.
And to get more political, I think it's important to empathize with people that feel that way, even if you would prefer they change their language (which believe me, I frequently do, and in moments of impatience, wish people would just think a little harder).
I do believe language shapes how we think, and changing it can change how we think, and that's important.

This is a bit rambly, but tl;dr this all kinda manifests in this next function. I appreciate the move from master->main in git lexicon. But working in an environment that is inconsistent on which
represents the "branch with the closest-to-production-code" is a frequent, albeit minor, inconvenience (i.e. a cognitive tax). So I made this function to figure it out for me.
#+begin_src fish
function gcm
        set -l result (git rev-parse --verify main)
        if not test $result
            echo "main is not a branch, checkin out master"
            echoAndEval "g checkout master"
        else
            echo "main is a branch, checking it out"
            echoAndEval "g checkout main"
        end
end
#+end_src
** Current branch
Function to parse the current git branch. I totally stole this from somewhere on the internet (like any usage of sed you find in here).
#+begin_src fish
function parse_git_branch
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
end
alias cb='parse_git_branch'
#+end_src
** Various shortcuts
List all git branches
#+begin_src fish
alias brs='g branch -vv'
#+end_src
Git status, git checkout, git log, git log files, current branch name
#+begin_src fish
  alias gs='g status'
  alias gc='g checkout'
  alias gl='g log'
  alias glf='gl --name-only'
  alias glogme='gl --author=esmongeski'
#+end_src
Git diff, git diff staged files, git diff with remote branch, git merge squash, git fetch
#+begin_src fish
alias gd='g diff'
alias gds='g diff --staged'
alias gdo='g diff origin/`cb`'
alias gms='g merge --squash'
alias gf='g fetch'
#+end_src
** Branch swapping
This was a failed experiment to quickly switch between two git branches, typically master (nowadays main) and the current working branch. Ended up not super useful.
#+begin_src fish
alias oswp="echo $OLDBRANCH; echo 'gswp to change, setswbranch to change oldbranch'"
alias swbr="echo $OLDBRANCH"
export OLDBRANCH=master

#+end_src
** Rebase continue
#+begin_src fish
alias grbc='g add -uv; g rebase --continue'
#+end_src
** New branch
#+begin_src fish
alias newbr='g checkout -b'

#+end_src
** TODO Push and open PR - make work in fish
So I haven't used this for a while - push and immediately open the MR (PR nowadays). I should try this again.
#+begin_src bash
function pushAndOpenMR
    set -l mr_result (g push)
    echo "$mr_result"
    findLinkAndOpen "$mr_result"
end
#+end_src
* Misc helper functions
Spit out the current date
#+begin_src fish
alias shortdate='date +%Y-%m-%d' # get date in format YYYY-MM-DD
alias sd='shortdate'
#+end_src

Count the files in a given directory
#+begin_src fish
function countfiles
    ls -1 $1 | wc -l | tr -d '[:space:]'
end
#+end_src
** TODO Fix this so it works in fish
Echo out each line of an input
#+begin_src fish
function splitOutput
    for token in $argv[1]
      echo $token
    end
end
#+end_src
Given a bunch of output, find anything prefixed with https and open it. This was for something specific but I don't remember what
#+begin_src fish
function findLinkAndOpen
    splitOutput "$argv[1]" | grep https | xargs open
end
#+end_src
* No window for emacs - really only relevant on ubuntu
#+begin_src fish
alias emacs='emacs --no-splash -nw'

#+end_src
* Background SSH agent
Start a background ssh agent if one isn't already running
#+begin_src fish
  export SSH_ENV=$HOME/.ssh/environment
  function start_agent
    echo "Initialising new SSH agent..."
    echo $SSH_ENV
    eval /usr/bin/ssh-agent | sed 's/^echo/#echo/' | sed 's/SSH_AUTH_SOCK/export SSH_AUTH_SOCK/' | sed 's/SSH_AGENT_PID/export SSH_AGENT_PID/' > {$SSH_ENV}
    echo succeeded
    chmod 600 {$SSH_ENV}
    . {$SSH_ENV} > /dev/null
    /usr/bin/ssh-add;
  end

  alias sag="start_agent"
  # Source SSH settings, if applicable
  if test -f $SSH_ENV
      . {$SSH_ENV} > /dev/null
      ps -ef | grep {$SSH_AGENT_PID} | grep "ssh-agent\$" > /dev/null || {
          echo "No agent found, starting new one"
          start_agent;
      }
  else
      echo "SSH_ENV not initiatlized, starting new agent"
      start_agent;
  end


#+end_src
* Docker
Aliases around cleaning up old containers
#+begin_src fish
alias d='docker'
alias killcontainers='docker container stop (docker ps -a -q)'
alias rmcontainer='d container rm -f'
alias dls='docker container ls'
alias dps='d container ls'
alias dlsa='d container ls -a'
alias rmc='rmcontainer'
alias drm='rmc'

#+end_src
Shortcut to bash into a container
#+begin_src fish
function dbashin
        d exec -it $argv[1] bash
end
#+end_src
Docker rm grep - remove containers that look like a certiain thing
#+begin_src fish
function drmg
        drm (dlsa | grep $argv[1] | awk '{print $1;}')
end
#+end_src
* Kubernetes
Shortcuts for interacting with pods
#+begin_src fish
checkEnvAndDefault "KUBE_NAMESPACE"

function kods
	echoAndEval "kubectl get pods -n $KUBE_NAMESPACE"
end

function findpods
	echoAndEval "kubectl get pods --all-namespaces | grep $argv[1]"
end

#+end_src

Set and change namespace
#+begin_src fish

alias skn='setkubenamespace'

function setkubenamespace
	export KUBE_NAMESPACE=$1
end
#+end_src
Logs and events
#+begin_src fish
function klogs
	klogswithnamespace $argv[1] $KUBE_NAMESPACE
end

function klogswithnamespace
	echoAndEval "kubectl logs $argv[1] --namespace $argv[2]"
end

function kevs
	echoAndEval "kubectl get events -n $KUBE_NAMESPACE"
end
#+end_src
See k8s contexts
#+begin_src fish
function kc
      echoAndEval "kubectl config get-contexts"
end
function kcsc
	echo "kubectl config use-context $argv[1]";
	kubectl config use-context $argv[1];
	kc
end
#+end_src
* Because who can remember awk syntax
Get the first column of output
#+begin_src fish
function firstColumn
        awk '{print $1;}' $argv[1];
end

#+end_src
